name: Deploy Main Branch to Server

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install dependencies
        run: yarn install

      - name: Build the app
        run: yarn build --mode production

      - name: Copy files via SSH
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST "
            if [ ! -d /home/$SSH_USERNAME/main ]; then
              git clone -b main https://github.com/citizenweb3/validatorinfo.git /home/$SSH_USERNAME/main
            else
              cd /home/$SSH_USERNAME/main && git pull origin main
            fi
          "

      - name: Deploy application
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST "
            cd /home/$SSH_USERNAME/main &&
            # Строим новый Docker образ
            docker build -t frontend-main . &&
            
            # Останавливаем старый контейнер, если он существует
            if [ \$(docker ps -q -f name=frontend-main) ]; then
              docker stop frontend-main
              docker rm frontend-main
            fi &&
            
            # Запускаем новый контейнер
            docker run -d --name frontend-main -p 81:80 frontend-main
          "
