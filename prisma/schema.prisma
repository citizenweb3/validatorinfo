generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chain {
  type         String
  chainId      String  @id
  rang         Int
  name         String
  prettyName   String
  coinType     Int
  denom        String
  minimalDenom String
  coinDecimals Int
  logoUrl      String
  coinGeckoId  String
  bech32Prefix String
  twitterUrl   String
  docs         String?

  github     Github?
  priceChart Price[]
  apr        Apr[]
  lcdNodes   LcdNode[]
  rpcNodes   RpcNode[]
  wsNodes    WsNode[]
  grpcNodes  GrpcNode[]
  validators Validator[]
  node       Node[]
  addresses  Address[]
}

model Github {
  chainId  String @id
  chain    Chain  @relation(fields: [chainId], references: [chainId])
  url      String
  mainRepo String
}

model WsNode {
  chainId String
  chain   Chain  @relation(fields: [chainId], references: [chainId])
  url     String

  @@id([chainId, url])
}

model RpcNode {
  chainId String
  chain   Chain  @relation(fields: [chainId], references: [chainId])
  url     String

  @@id([chainId, url])
}

model LcdNode {
  chainId String
  chain   Chain  @relation(fields: [chainId], references: [chainId])
  url     String

  @@id([chainId, url])
}

model GrpcNode {
  chainId String
  chain   Chain  @relation(fields: [chainId], references: [chainId])
  url     String

  @@id([chainId, url])
}

model Node {
  chain               Chain      @relation(fields: [chainId], references: [chainId])
  chainId             String
  operator_address    String     @id
  consensus_pubkey    String
  jailed              Boolean
  tokens              String
  delegator_shares    String
  moniker             String
  identity            String
  website             String
  security_contact    String
  details             String
  unbonding_height    String
  unbonding_time      DateTime
  update_time         DateTime
  rate                String
  max_rate            String
  max_change_rate     String
  min_self_delegation String
  validator           Validator? @relation(fields: [identity], references: [identity])
}

model Price {
  chain   Chain    @relation(fields: [chainId], references: [chainId])
  chainId String
  id      Int      @id @default(autoincrement())
  value   Float
  date    DateTime @default(now())
}

model Apr {
  chain   Chain    @relation(fields: [chainId], references: [chainId])
  chainId String
  id      Int      @id @default(autoincrement())
  value   Float
  date    DateTime @default(now())
}

model Validator {
  identity         String  @id
  moniker          String
  details          String?
  website          String?
  github           String?
  telegram         String?
  discord          String?
  twitter          String?
  security_contact String?
  nodes            Node[]
  url              String?
  wrongKey         Boolean @default(false)
  Chain            Chain?  @relation(fields: [chainChainId], references: [chainId])
  chainChainId     String?
}

model Account {
  username    String?   @unique
  mainAddress String    @id
  addresses   Address[]
  coreTeam    Boolean   @default(false)
}

model Address {
  wallet      Account @relation(fields: [mainAddress], references: [mainAddress])
  mainAddress String
  address     String  @id
  chainId     String
  chain       Chain   @relation(fields: [chainId], references: [chainId])
}
